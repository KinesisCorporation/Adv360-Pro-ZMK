
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/outputs.h>

/ {
  behaviors {
    #include "macros.dtsi"

    gqt: global-quick-tap {
        compatible = "zmk,behavior-hold-tap";
        label = "GLOBAL_QUICK_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <125>;
        global-quick-tap;
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
     &kp ESC     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5                &to 2                                                                                   &to 4  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
   &kp EQUAL      &kp Q     &kp W     &kp E      &kp R   &kp T            &kp PG_UP                                                                                &kp HOME   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BSLH
     &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G            &kp PG_DN     &kp LCTRL  &macro_switch_win                   &macro_alt_tab  &kp RCTRL    &kp END   &kp H   &kp J      &kp K     &kp L  &kp SEMI    &kp SQT
       &mo 3      &kp Z     &kp X     &kp C      &kp V   &kp B                                        &kp LEFT_SHIFT                  &kp RIGHT_SHIFT                         &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp ENTER
 &macro_lang  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                     &kp BSPC  &kp LEFT_WIN       &kp LEFT_ALT                    &kp RIGHT_ALT    &kp TAB  &kp SPACE          &kp UP   &kp DOWN  &kp LBKT  &kp RBKT  &kp ENTER
            >;
        };

        layer_keypad {
            bindings = <
 &trans     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5               &to 0                                                       &to 4  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
 &trans      &kp Q     &kp W     &kp E      &kp R   &kp T               &none                                                       &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
 &trans      &kp A     &kp S     &kp D      &kp F   &kp G               &none   &trans  &trans                  &trans  &trans      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
 &trans      &kp Z     &kp X     &kp C      &kp V   &kp B                               &trans                  &trans                      &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
 &trans  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                    &kp BSPC  &kp DEL  &trans                  &trans  &trans  &kp KP_N0              &kp UP      &kp DOWN     &kp KP_DOT         &kp RBKT     &trans
            >;
        };

        layer_fn {
            bindings = <
 &trans  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                             &to 0                                                                  &trans  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &kp F1  &trans  &trans  &trans  &trans  &trans               &macro_webex_g_mute                                                   &macro_monitor_bri_up  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &macro_webex_focus_win  &trans  &trans                  &trans  &trans  &macro_monitor_bri_dow  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                            &trans                  &trans                                  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans                                    &trans  &trans  &trans                  &trans  &trans                  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                             &none                                                                                    &trans   &none       &none            &none       &none       &none   &none
  &none         &none         &none         &none         &none         &none                       &bootloader                                                                               &bootloader   &none       &none            &none       &none       &none   &none
  &none         &none         &none         &none         &none         &none            &rgb_ug RGB_MEFS_CMD 5       &none  &bt BT_CLR                  &bt BT_CLR    &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5   &none       &none            &none       &none       &none   &none
  &none         &none         &none         &none         &none         &none                                                     &none                       &none                                         &none       &none            &none       &none       &none   &none
  &none         &none         &none         &none         &none                                      &bl BL_INC  &bl BL_DEC       &none                  &bl BL_TOG  &out OUT_TOG                   &none          &bl BL_TOG  &rgb_ug RGB_TOG  &bl BL_INC  &bl BL_DEC   &none
            >;
        };

        layer_Idea {
            bindings = <
 &trans  &kp F2  &kp F3  &kp F4  &kp F5  &macro_idea_rename             &to 2                                                   &to 0  &kp F7  &ht_bl F8 LS(F8)  &kp F9  &macro_idea_scratch  &macro_idea_debug  &macro_idea_run
 &trans  &trans  &trans  &trans  &trans              &trans            &trans                                                  &trans  &trans            &trans  &trans               &trans             &trans           &trans
 &trans  &trans  &trans  &trans  &trans              &trans            &trans  &trans  &trans                  &trans  &trans  &trans  &trans            &trans  &trans               &trans             &trans           &trans
 &trans  &trans  &trans  &trans  &trans              &trans                            &trans                  &trans                  &trans            &trans  &trans               &trans             &trans           &trans
 &trans  &trans  &trans  &trans  &trans                                &trans  &trans  &trans                  &trans  &trans  &trans                    &trans  &trans               &trans             &trans           &trans
            >;
        };

    };
};
