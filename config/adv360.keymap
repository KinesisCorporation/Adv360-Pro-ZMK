#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
    combos {
      compatible = "zmk,combos";
      lctrl {
          timeout-ms = <50>;
          key-positions = <29 30>;
          bindings = <&kp LCTRL>;
      };
      lalt {
          timeout-ms = <50>;
          key-positions = <30 31>;
          bindings = <&kp LALT>;
      };
      lcmd {
          timeout-ms = <50>;
          key-positions = <31 32>;
          bindings = <&kp LEFT_COMMAND>;
      };
      laltcmd {
          timeout-ms = <50>;
          key-positions = <30 31 32>;
          bindings = <&kp LA(LEFT_COMMAND)>;
      };
      lctrlcmd {
          timeout-ms = <50>;
          key-positions = <29 31 32>;
          bindings = <&kp LC(LEFT_COMMAND)>;
      };
      rctrl {
          timeout-ms = <50>;
          key-positions = <44 43>;
          bindings = <&kp RCTRL>;
      };
      ralt {
          timeout-ms = <50>;
          key-positions = <43 42>;
          bindings = <&kp RALT>;
      };
      rcmd {
          timeout-ms = <50>;
          key-positions = <42 41>;
          bindings = <&kp RIGHT_COMMAND>;
      };
      creturn {
          timeout-ms = <50>;
          key-positions = <41 43>;
          bindings = <&kp RETURN>;
      };
      ctab {
          timeout-ms = <50>;
          key-positions = <30 32>;
          bindings = <&kp TAB>;
      };
    };
    behaviors {
      #include "macros.dtsi"

      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
      };
    };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4     &kp N5                    &tog 1      &mo 3      &kp N6           &kp N7         &kp N8     &kp N9     &kp N0  &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R      &kp T                     &none      &none       &kp Y            &kp U          &kp I      &kp O      &kp P   &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F      &kp G                    &trans  &kp LCTRL    &kp LALT                                   &kp LGUI  &kp RCTRL      &none     &kp H    &kp J        &kp K    &kp L  &kp SEMI    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C    &lt 1 V      &kp B                     &none      &none    &kp HOME            &none          &none  &kp PG_UP      &none      &none     &kp N  &lt 2 M  &lt 4 COMMA  &kp DOT  &kp FSLH  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT  &kp SPACE            &kp LEFT_SHIFT    &kp END  &kp RETURN  &kp RIGHT_SHIFT  &kp BACKSPACE     &kp UP   &kp DOWN   &kp LBKT  &kp RBKT    &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1        &kp N2            &kp N3     &kp N4    &kp N5             &trans      &mo 3     &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY   &kp MINUS
   &kp TAB      &kp Q         &kp W             &kp E      &kp R     &kp T              &none      &none      &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp NUMBER_0    &kp BSLH
   &kp ESC      &kp A         &kp S             &kp D      &kp F     &kp G              &none  &kp LCTRL   &kp LALT                                 &kp LGUI        &kp RCTRL       &none     &kp H  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS    &kp SQT
 &kp LSHFT  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND      &kp V     &kp B              &none      &none   &kp HOME       &none         &none      &kp PG_UP            &none       &none     &kp N  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE      &kp CAPS          &kp LEFT  &kp RIGHT  &kp BSPC            &kp DEL    &kp END  &kp PG_DN   &kp ENTER     &kp KP_N0         &kp UP         &kp DOWN  &kp KP_DOT  &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F1          &kp F2             &kp F3                &kp F4                 &kp F5         &kp F6            &tog 1   &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &kp UNDERSCORE  &kp DOUBLE_QUOTES        &kp LEFT_BRACE        &kp RIGHT_BRACE       &kp PIPE             &none   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans       &kp MINUS   &kp SINGLE_QUOTE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH             &none  &trans  &trans                   &trans   &trans    &none  &trans  &trans  &trans  &trans  &trans  &trans
 &trans       &kp TILDE          &kp GRAVE      &kp LEFT_BRACKET      &kp RIGHT_BRACKET       &kp PLUS             &none   &none  &trans   &none   &none   &trans    &none    &none  &trans  &trans  &trans  &trans  &trans  &trans
 &trans          &trans             &trans                &trans                 &trans         &trans            &trans  &trans  &trans  &trans  &trans   &trans   &trans   &trans  &trans  &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4                             &none       &trans  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                   &none
  &none         &none         &none         &none         &none            &none                       &bootloader  &bootloader         &none         &none            &none         &none         &none                   &none
  &none         &none         &none         &none         &none            &none            &rgb_ug RGB_MEFS_CMD 5   &bt BT_CLR         &none                                   &bt BT_CLR    &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5   &none   &none   &none   &none   &none   &none
  &none         &none         &none         &none         &none            &none                             &none        &none         &none         &none            &none         &none         &none                   &none   &none   &none   &none   &none   &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC  &rgb_ug RGB_TOG                        &bl BL_TOG        &none         &none    &bl BL_TOG  &rgb_ug RGB_TOG    &bl BL_INC    &bl BL_DEC                   &none   &none   &none
            >;
        };

        layer_Shifted {
            bindings = <
 &trans  &trans           &trans       &trans     &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans    &kp AMPERSAND     &kp STAR      &none  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans       &kp DOLLAR  &kp PERCENT  &kp CARET  &trans            &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans           &trans       &trans     &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

    };
};
