
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#include "adv360keys.h"

#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  };

&sk {
  release-after-ms = <STICKY_KEY_TIMEOUT>;
};

/ {
combos {
    compatible = "zmk,combos";
/* Brackets */
COMBO(left_bracket, &kp LBKT, 0 10)
COMBO(right_bracket, &kp RBKT, 7 17)
COMBO(left_parenthesis, &kp LPAR, 1 11)
COMBO(right_parenthesis, &kp RPAR, 6 16)
COMBO(left_brace, &kp LBRC, 2 12)
COMBO(right_brace, &kp RBRC, 5 15)

/* Text */
COMBO(redo, &kp LG(LS(Z)), 2 3)
COMBO(undo, &kp LG(Z), 12 13)
COMBO(redow, &kp LC(Y), 2 3)
COMBO(undow, &kp LC(Z), 12 13)
COMBO(caps_word, &caps_word, 31 32)
COMBO(key_repeat_l, &key_repeat, 23 24)
COMBO(key_repeat_r, &key_repeat, 25 26)
COMBO(alfred, &kp LG(SPACE), 21 23)
COMBO(clpbrd, &kp LG(LC(LA(LS(Z)))), 21 22 23)
COMBO(esc, &kp ESC, 23 30)
};
  behaviors {
    #include "macros.dtsi"

    // Sticky key on tap, normal key on hold
    // Useful for modifier-clicking without the modifier remaining active
    nk: not_so_sticky_key {
      compatible = "zmk,behavior-hold-tap";
      label = "NOT_SO_STICKY_KEY";
      #binding-cells = <2>;
      tapping_term_ms = <200>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&sk>;
    };

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
   &kp ESC        &kp N1    &kp N2    &kp N3     &kp N4  &kp N5     &tog 1                                                                                             &mo 3               &kp N6  &kp N7     &kp N8      &kp N9    &kp N0       &kp MINUS
   &kp GRAVE      &kp Q     &kp W     &kp E      &kp R   &kp T      &macro_braces                                                                                      &kp LG(A)           &kp Y   &kp U      &kp I       &kp O     &kp P        &kp BSLH
   &kp TAB        &kp A     &kp S     &kp D      &kp F   &kp G      &macro_parens               &macro_dquotes  &kp LALT   &none   &none  &kp RCTRL  &kt LA(LSHIFT)    &kp LA(BACKSPACE)   &kp H   &kp J      &kp K       &kp L     &kp SEMI     &kp SQT
   &kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B                    &none         &none           &kp HOME   &none   &none  &kp PG_UP  &none      &none                      &kp N   &kp M      &kp COMMA   &kp DOT   &kp FSLH     &kp RSHFT
   &mo 2          &kp EQUAL &kp CAPS  &kp LEFT   &kp RIGHT                        &kp LCMD      &kp BSPC        &kp END                   &kp PG_DN  &kp ENTER  &kp SPACE                          &kp UP     &kp DOWN    &kp LBKT  &kp RBKT     &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5              &trans                                                                 &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T               &none                                                                 &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G               &none  &kp LCTRL  &kp LALT   &none   &none   &kp LGUI  &kp RCTRL      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B               &none      &none  &kp HOME   &none   &none  &kp PG_UP      &none      &none   &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                    &kp BSPC    &kp DEL   &kp END                  &kp PG_DN  &kp ENTER  &kp KP_N0              &kp UP      &kp DOWN     &kp KP_DOT         &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog 1                                                   &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &trans  &trans  &trans  &trans  &trans             &none                                                   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none  &trans  &trans   &none   &none  &trans  &trans   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none   &none  &trans   &none   &none  &trans   &none   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                             &none                                                                              &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &none
  &none         &none         &none         &none         &none         &none                       &bootloader                                                                         &bootloader         &none         &none         &none         &none         &none   &none
  &none         &none         &none         &none         &none         &none            &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR   &none   &none   &none  &bt BT_CLR  &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5         &none         &none         &none         &none         &none   &none
  &none         &none         &none         &none         &none         &none                             &none       &none   &none   &none   &none       &none       &none                   &none         &none         &none         &none         &none         &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC                                 &rgb_ug RGB_TOG  &bl BL_TOG   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG                  &bl BL_INC    &bl BL_DEC         &none         &none   &none
            >;
        };

        layer_hjkl_arrow {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans          &trans          &trans        &trans           &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans          &trans          &trans        &trans           &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans        &trans           &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans                          &trans        &trans           &trans  &trans  &trans
            >;
        };

    };
};
